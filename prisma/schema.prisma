// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Required by next-auth to allow authentication
// https://authjs.dev/reference/adapter/prisma#naming-conventions
// We use the postgres naming coneventions underscore for rows and lower case for tables 
// BUT the JS naming coneventions of CamelCase and Captials for classes hences all the @maps
// Note this convention is sometimes broken bellow for the sake of next-auth see url above
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  MANAGER  @map("manager")
  EMPLOYEE @map("employee")
}

// TODO: create a pivot table for User and Company so we can do other things like onboaridng !
// NOTE: for now all new users are just added in company one which links to me and ashish
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  imgUrl        String?   @map("img_url")
  role          Role      @default(MANAGER)
  accounts      Account[]
  sessions      Session[]
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String    @default("1") @map("company_id")

  @@map("users")
}

model Framework {
  id          String    @id @default(cuid())
  name        String
  description String
  url         String
  companies   Company[]
  policies    Policy[]
  imgUrl      String    @map("img_url")

  @@map("frameworks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Company {
  id           String        @id @default(cuid())
  domain       String?
  name         String
  users        User[]
  frameworks   Framework[]
  integrations Integration[]
  Issue        Issue[]

  @@map("company")
}

model Control {
  id          String     @id @default(cuid())
  name        String
  description String
  evidences   Evidence[]
  policies    Policy[]

  @@map("controls")
}

model Policy {
  id          String     @id @default(cuid())
  name        String
  description String
  controls    Control[]
  frameworkId String?    @map("framework_id")
  Framework   Framework? @relation(fields: [frameworkId], references: [id])

  @@map("policies")
}

model Evidence {
  id            String       @id @default(cuid())
  name          String
  data          Bytes?
  description   String
  url           String?
  controls      Control[]
  integrationId String?      @map("integration_id")
  Integration   Integration? @relation(fields: [integrationId], references: [id])

  @@map("evidence")
}

// A issue can occur from the mistakes found from a integration
model Issue {
  id            String       @id @default(cuid())
  name          String
  description   String
  Integration   Integration? @relation(fields: [integrationId], references: [id])
  integrationId String?
  risk          String?
  frameworks    String[]
  company       Company      @relation(fields: [companyId], references: [id])
  companyId     String

  @@map("issue")
}

model Integration {
  id                  String            @id @default(cuid())
  config              Json
  evidences           Evidence[]
  companyId           String
  Company             Company           @relation(fields: [companyId], references: [id])
  // This is the selected inegration option 
  selectedIngrationId String
  selectedIngration   IntegrationOption @relation(fields: [selectedIngrationId], references: [id])
  issues              Issue[]

  @@map("integrations")
}

model IntegrationOption {
  id          String        @id @default(cuid())
  name        String
  description String
  url         String
  imgUrl      String        @map("img_url")
  Integration Integration[]

  @@map("integration_option")
}
